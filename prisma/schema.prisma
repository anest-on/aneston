// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Form {
  id                          String  @id @default(uuid())
  doctor_id                   String
  pacient_name                String
  pacient_birthdate           String
  pacient_gender              String
  pacient_email               String
  pacient_number              String
  pacient_healthInsurance     String
  pacient_healthInsuranceName String?
  pacient_healthInsuranceId   String?

  companion_name    String
  companion_kinship String
  companion_email   String
  companion_number  String

  cirurgy_name                         String?
  cirurgy_physician                    String?
  pacient_weight                       String?
  pacient_height                       String?
  pacient_allergy                      String?
  pacient_allergy_names                String[]
  pacient_heart_conditions             String[]
  pacient_heart_conditions_observation String?
  pacient_disease                      String?
  pacient_disease_names                String[]
  pacient_medicines                    Json[]
  pacient_antibiotic                   String?
  pacient_antibiotics_names            String[]
  pacient_did_cirurgy                  String?
  pacient_cirurgies                    Json[]
  pacient_smoke                        String?
  pacient_started_smoking              String?
  pacient_stopped_smoking              String?
  pacient_when_stop_smoking            String?
  pacient_pack_smoke                   String?
  pacient_do_physical_activity         String?
  pacient_physical_activity            Json[]
  pacient_has_anesthetic_complication  String?
  pacient_anesthetic_complications     String[]
  pacient_procedure_summary            String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  doctor User @relation(fields: [doctor_id], references: [id])

  @@index([doctor_id])
}

model User {
  id               String  @id @default(uuid())
  name             String
  email            String  @unique
  user_link        String?
  city             String?
  state            String?
  avatar_url       String?
  access_type      String?
  password         String?
  confirm_password String?

  doctor_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts         Account[]
  UserTimeInterval UserTimeInterval[]
  Form             Form[]
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  appointment_time      Int
  interval_times        Json?
  user_id               String
  user                  User   @relation(fields: [user_id], references: [id])

  DaytimeInterval DaytimeInterval[]
  @@index([user_id])
  @@map("user_time_intervals")
}

model DaytimeInterval {
  id                    String @id @default(uuid())
  time_start_interval_in_minutes   Int
  time_end_in_minutes Int
  interval_id String

  user                  UserTimeInterval   @relation(fields: [interval_id], references: [id])
  
  @@index([interval_id])
  @@map("daytime_intervals")
}

model Account {
  id                String  @id @default(cuid())
  user_id           String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [user_id], references: [id])

  @@unique([provider, providerAccountId])
  @@index([user_id])
}
